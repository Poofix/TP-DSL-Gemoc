/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.mydsl.generator;

import com.google.common.collect.Iterables;
import fr.ut2j.tp01.FSM;
import fr.ut2j.tp01.FinalState;
import fr.ut2j.tp01.StartState;
import fr.ut2j.tp01.State;
import fr.ut2j.tp01.Transition;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Conversions;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class MyDslGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _get = resource.getContents().get(0);
    final FSM myfsm = ((FSM) _get);
    fsa.generateFile("FSM.java", this.generateFSMProgrammCode(myfsm));
    fsa.generateFile("State.java", this.generateStateProgrammCode());
    fsa.generateFile("Transition.java", this.generateTransitionProgrammCode());
  }
  
  /**
   * Permet de générer la classe principale myDSL
   */
  public String generateFSMProgrammCode(final FSM fsm) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import java.util.ArrayList;");
    _builder.newLine();
    _builder.append("import java.util.List;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class FSM {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<State> states;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private List<Transition> transitions;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private State currentState;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Constructeur de la classe");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private FSM(String newName){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.states = new ArrayList<State>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.transitions = new ArrayList<Transition>();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = newName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setName(String newName){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = newName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName(){");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setCurrentState(State currentState) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.currentState = currentState;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addState(State s) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.states.add(s);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void addTransition(Transition t) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.transitions.add(t);");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Permet d\'appeller la méthode \"transit\" de chaque classe Transit");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void transitAll() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("for(int i = 0; i < transitions.size(); i++) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("this.currentState = transitions.get(i).transit(this.currentState);");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("FSM ");
    String _name = fsm.getName();
    _builder.append(_name, "\t\t");
    _builder.append(" = new FSM(\"");
    String _name_1 = fsm.getName();
    _builder.append(_name_1, "\t\t");
    _builder.append("\");");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.newLine();
    {
      Iterable<State> _filter = Iterables.<State>filter(fsm.getState(), State.class);
      for(final State state : _filter) {
        _builder.append("\t\t");
        _builder.append("State ");
        String _name_2 = state.getName();
        _builder.append(_name_2, "\t\t");
        _builder.append(" = new State(\"");
        String _name_3 = state.getName();
        _builder.append(_name_3, "\t\t");
        _builder.append("\");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        String _name_4 = fsm.getName();
        _builder.append(_name_4, "\t\t");
        _builder.append(".addState(");
        String _name_5 = state.getName();
        _builder.append(_name_5, "\t\t");
        _builder.append("); // Garde en mémoire tous les états");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    String _name_6 = fsm.getName();
    _builder.append(_name_6, "\t\t");
    _builder.append(".currentState = ");
    String _name_7 = ((StartState[])Conversions.unwrapArray(Iterables.<StartState>filter(fsm.getState(), StartState.class), StartState.class))[0].getName();
    _builder.append(_name_7, "\t\t");
    _builder.append("; // Associe le startState au current state de la classe.");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t\t\t\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    {
      EList<Transition> _transition = fsm.getTransition();
      for(final Transition transition : _transition) {
        _builder.append("\t\t");
        _builder.append("Transition ");
        String _name_8 = transition.getName();
        _builder.append(_name_8, "\t\t");
        _builder.append(" = new Transition(\"");
        String _name_9 = transition.getName();
        _builder.append(_name_9, "\t\t");
        _builder.append("\",");
        String _name_10 = transition.getSource().getName();
        _builder.append(_name_10, "\t\t");
        _builder.append(", ");
        String _name_11 = transition.getTarget().getName();
        _builder.append(_name_11, "\t\t");
        _builder.append(");");
        _builder.newLineIfNotEmpty();
        _builder.append("\t\t");
        String _name_12 = fsm.getName();
        _builder.append(_name_12, "\t\t");
        _builder.append(".addTransition(");
        String _name_13 = transition.getName();
        _builder.append(_name_13, "\t\t");
        _builder.append("); // Garde en mémoire toutes les transitions");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("while(");
    String _name_14 = fsm.getName();
    _builder.append(_name_14, "\t\t");
    _builder.append(".currentState != ");
    String _name_15 = ((FinalState[])Conversions.unwrapArray(Iterables.<FinalState>filter(fsm.getState(), FinalState.class), FinalState.class))[0].getName();
    _builder.append(_name_15, "\t\t");
    _builder.append(") {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    String _name_16 = fsm.getName();
    _builder.append(_name_16, "\t\t\t");
    _builder.append(".transitAll();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  /**
   * Génére la classe State
   */
  public String generateStateProgrammCode() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class State {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public State(String newName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = newName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setName(String newName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = newName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder.toString();
  }
  
  /**
   * Génére la classe de Transition
   */
  public String generateTransitionProgrammCode() {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public class Transition {");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private String name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private State input;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("private State output;");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public Transition(String newName, State in, State out) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = newName;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.input = in;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.output = out;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public void setName(String newName) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("this.name = newName;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.name;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getInputName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.input.getName();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public State getInputState() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.input;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public String getOutputName() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.output.getName();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public State getOuputState() {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return this.output;");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("/**");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("* Vérifie que le current state de la classe principale correspond à l\'input");
    _builder.newLine();
    _builder.append("\t ");
    _builder.append("*/");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("public State transit(State dslState) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("if (this.input == dslState && this.output != dslState) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("System.out.println(this.input.getName() + \" -> \" + this.output.getName());");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("return this.output;");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("return dslState; // Retourne le nouvel état");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    _builder.newLine();
    return _builder.toString();
  }
}
